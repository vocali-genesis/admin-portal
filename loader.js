const fs = require("fs").promises;
const yargs = require("yargs");
const yup = require("yup");

const config_schema = yup.object().shape({
  services: yup.array().of(yup.string()).required("Services Array required"),
  modules: yup.array().of(yup.string()).required("Modules Array required"),
});

async function readJSON(jsonFilePath) {
  const data = await fs.readFile(jsonFilePath, "utf8");
  const jsonData = JSON.parse(data);
  try {
    config_schema.validateSync(jsonData);
    return jsonData;
  } catch (error) {
    console.error("JSON Validation Error: " + error.message);

    return "";
  }
}

async function generateImport(jsonData) {
  if (!jsonData) {
    return;
  }

  try {
    const header = `// Autogenerated file using \`pnpm load <path-to-json>\`, don\`t edit or delete\nimport '@/core/module/module.manager'`;

    const importModules = jsonData.modules.map(
      (module) => `import '@/modules/${module}'`
    );
    importModules.unshift("// Modules");

    const importServices = jsonData.services.map(
      (service) => `import '@/services/${service}'`
    );

    importServices.unshift("// Services");

    const importStatements = [
      header,
      importModules.join("\n"),
      importServices.join("\n"),
    ];
    await fs.writeFile("import.ts", importStatements.join("\n"));
    console.log("Import file generated successfully!");
  } catch (err) {
    console.error(err);
  }
}

async function generateImportFile(jsonFilePath) {
  const jsonData = await readJSON(jsonFilePath);
  await generateImport(jsonData);
}

const argv = yargs
  .usage("Usage: $0 --file <path>")
  .demandOption(["file"])
  .describe("file", "Path to the JSON configuration file").argv;

generateImportFile(argv.file);
